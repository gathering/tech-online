#!/bin/bash

# Requirements: libwww-perl

# Usage:
# -1. Make sure the directory the password etc. is placed in is read-protected so participants can't access it. "chmod 700 $HOME".
# 0. Add this script to some central node with access to the stations.
# 1. Add your default SSH pubkey to the stations.
# 2. Create a "verify" token in the backend and add it to a read-protected file "auth_token" in the current directory.
# 3. Run it (example for station 0): screen -S "station-0" -dm bash -c "while : ; do time timeout 60 ./verify 0 ; done"

set -u

station=${1:-1}
prefix=10.${station}.
echo station $station
start_time=$(date +%s)
hint_int=n
declare -A mgmt_ip
mgmt_ip[core]=10.91.20.12
mgmt_ip[distro]=${prefix}200.2
mgmt_ip[edge0]=${prefix}200.6
mgmt_ip[edge1]=${prefix}200.10
mgmt_ok=""
mgmt_bad=""

auth_token=$(cat auth_token)
backend_endpoint="https://techo.gathering.org/api/test/"
declare -A linknets
linknets[distro-core]="${prefix}200.1 core ${prefix}200.2 distro"
linknets[distro-edge0]="${prefix}200.5 distro ${prefix}200.6 edge0"
linknets[distro-edge1]="${prefix}200.9 distro ${prefix}200.10 edge1"
gfail=0
lfail=0

ferdig=nope
t_header=""

s_n=0
seq=0


cleanup() {
	runtime=$(( $(date +%s) - ${start_time} ))
}

trap cleanup EXIT

state() {
	test_shortname="$1"
	test_name="$2"
	status_raw="$3"
	status_description="${4:-}"

	s_n=$(( $s_n + 1 ))
	if [ $status_raw != 0 ]; then
		_state="fail"
		success="false"
		lfail=$(( $lfail + 1 ))
	else
		_state="ok"
		success="true"
	fi
	printf "[ %-4s ] [ %-46s ] %s (%s)\n" "$_state" "$test_shortname" "$test_name" "$status_description"
	comma=""
	if [ $s_n != 1 ]; then
		comma=","
	fi
	{
		cat <<-_EOF_
		{
		"track": "net",
		"task_shortname": "$t_header",
		"shortname": "$test_shortname",
		"station_shortname": "${station}",
		"name": "$test_name",
		"description": "",
		"sequence": $seq,
		"status_success": $success,
		"status_description": "$status_description"
		}
		_EOF_
	} | lwp-request -H "Authorization: Bearer $auth_token" -d -m POST "${backend_endpoint}" >&2
	seq=$(( $seq + 1 ))
}

mping() {
	ping -c1 -q -W 1 $1 >/dev/null
	ret=$?
	state "ping-$1-$2" "Ping of $1 $2" "$ret"
	return $ret
}

sshh() {
	ssh -oStrictHostKeyChecking=no -oPreferredAuthentications=publickey "$@"
}

test_mgmt() {
	if [ $3 -eq 0 ]; then
		sshh $1 show system uptime | grep -q  Time
		ret=$?
		status_description=
	else
		ret=1
		status_description="Skipped."
	fi
	state "ssh-$1-$2" "SSH to $1 $2" "$ret"
	if [ $ret = 0 ]; then
		mgmt_ok="${mgmt_ok} $1 "
	fi
	return $ret
}

mgmt_ok() {
	echo "$mgmt_ok" | egrep -q " $1 "
}

remote_ping() {
	src=$1
	target=$2
	comment=$3

	if mgmt_ok ${mgmt_ip[$src]}; then
		sshh ${mgmt_ip[$src]} ping count 2 wait 1 $target 2>&1 | egrep -q '\s0% packet loss'
		ret=$?
		state "ping-$src-$target" "Ping from $src to $target $comment" "$ret"
		return $ret
	else
		ret=1
		state "ping-$src-$target" "Ping from $src to $target $comment" "$ret" "Skipped."
		return $ret
	fi
}

header() {
	echo " *****: $*"
	t_header="$*"
	gfail=$(( $gfail + $lfail))
	lfail=0
}

do_hint() {
	if [ $lfail = 0 ]; then
		return 1
	fi
	if [ $hint_int = "n" ]; then
		return 1
	fi
	echo -n 'Do you want a hint? y/[n]: '
	read hint
	if [ $hint = "y" ]; then
		cat $1
		echo
		echo "And remember: If in doubt: Ask on discord!"
		echo "(press enter to continue)"
		read
	fi
}

mgmt() {
	src=$1
	shift
	rest="$*"
	if mgmt_ok ${mgmt_ip[$src]}; then
		sshh $src "$rest"
		return 0
	fi
	return 1
}

v_mgmt() {
	header "management"
	for a in distro edge0 edge1; do
		mping ${mgmt_ip[$a]} "$a"
		test_mgmt ${mgmt_ip[$a]} $a $?
	done
	do_hint hint_mgmt
}

link_test() {
	aside=$1
	aname=$2
	bside=$3
	bname=$4
	fname="$2-$4"
	mping $aside "$fname: $aname global"
	mping $bside "$fname: $bname global"
	remote_ping $aname $bside "$fname: $aname from $bname"
	remote_ping $bname $aside "$fname: $bname from $aname"
}

linkp() {
	header "Linknet"
	for a in ${!linknets[*]}; do
		link_test ${linknets[$a]}
	done
	# link_test ${prefix}200.1 core 10.1.200.2 distro
	# link_test ${prefix}200.5 distro 10.1.200.6 edge0
	# link_test ${prefix}200.9 distro 10.1.200.10 edge1
	do_hint hint_link
}

laptop() {
	header "Participant"
	mping ${prefix}100.1 "edge0 gateway-ip"
	mping ${prefix}100.2 "edge0 - participant"
	remote_ping edge0 ${prefix}100.1 "edge0 - gw ip - locally from edge0"
	remote_ping edge0 ${prefix}100.2 "edge0 - client ip - locally from edge0"
	do_hint hint_participant
}

lacp_core() {
	header 'LACP'
	echo -n '[ xxxx ] Clearing counters...'
	mgmt ${mgmt_ip[core]} 'clear lacp statistics'
	echo -n 'Sleeping for a second or two...'
	sleep 2
	echo 'Checking...'
	lines=$(mgmt ${mgmt_ip[core]}  'show lacp statistics interfaces | display json ' | jq '."lacp-interface-statistics-list"[0]."lacp-interface-statistics"[0]."lag-lacp-statistics"[] | .name[0].data + " lacp-rx-packets: " + ."lacp-rx-packets"[0].data' | sed 's/"//g')
	echo -e "$lines" | awk '/\s+0$/ { exit 1 }; '
	ret=$?

	state "lacp-core-distro" "LACP-check of core-distro interfaces" "$ret"
	if [ $ret != 0 ]; then
		echo "No LACP packets received on at least one interface"
		echo -e "$lines"
	fi
	do_hint hint_lacp
}

core_ping() {
	header 'Ping'
	remote_ping core 10.1.200.2 "core-distro linknet - distro-side"
}

task1() {
	header "task1"
	link_test ${linknets[distro-core]}
}

task2() {
	header task2
	link_test ${linknets[distro-edge0]}
}

task3() {
	header task3
	link_test ${linknets[distro-edge1]}
}

task4() {
	header task4
	mping ${prefix}100.1 "edge0 gateway-ip"
	mping ${prefix}100.2 "edge0 - participant"
	remote_ping edge0 ${prefix}100.1 "edge0 - gw ip - locally from edge0"
	remote_ping edge0 ${prefix}100.2 "edge0 - client ip - locally from edge0"
}

v_mgmt
task1
task2
task3
task4
#core_ping
#lacp_core
#linkp
#laptop
ferdig=yup
